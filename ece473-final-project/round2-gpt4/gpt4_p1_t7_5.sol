// SPDX-License-Identifier: MIT pragma solidity ^0.8.17; // updated Solidity version  interface IERC20 {     function totalSupply() external view returns (uint256);     function balanceOf(address account) external view returns (uint256);     function transfer(address recipient, uint256 amount) external returns (bool);     function allowance(address owner, address spender) external view returns (uint256);     function approve(address spender, uint256 amount) external returns (bool);     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value); }  contract MyToken is IERC20 {     string public constant name = 'MyToken';     string public constant symbol = 'MTK';     uint8 public constant decimals = 18;     uint256 public constant _totalSupply = 10000;      mapping (address => uint256) private _balances;     mapping (address => mapping (address => uint256)) private _allowed;      constructor() {         _balances[msg.sender] = _totalSupply;     }      function totalSupply() public view override returns (uint256) {         return _totalSupply;     }      function balanceOf(address owner) public view override returns (uint256) {         return _balances[owner];     }      function allowance(address owner, address spender) public view override returns (uint256) {         return _allowed[owner][spender];     }      function transfer(address to, uint256 value) public override returns (bool) {         require(value <= _balances[msg.sender]);         require(to != address(0));          _balances[msg.sender] -= value;         _balances[to] += value;         emit Transfer(msg.sender, to, value);         return true;     }      function approve(address spender, uint256 value) public override returns (bool) {         require(spender != address(0));          _allowed[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function transferFrom(address from, address to, uint256 value) public override returns (bool) {         require(value <= _balances[from]);         require(value <= _allowed[from][msg.sender]);         require(to != address(0));          _balances[from] -= value;         _balances[to] += value;         _allowed[from][msg.sender] -= value;         emit Transfer(from, to, value);         return true;     } }