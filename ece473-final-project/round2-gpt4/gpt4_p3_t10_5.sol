// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  contract MyToken {     string public name;     string public symbol;     uint8 public constant decimals = 18;     uint256 public immutable totalSupply;      mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      constructor(         uint256 initialSupply,         string memory tokenName,         string memory tokenSymbol     ) {         totalSupply = initialSupply * 10 ** uint(decimals);         balanceOf[msg.sender] = totalSupply;         name = tokenName;         symbol = tokenSymbol;     }      function transfer(address to, uint256 value) public returns (bool success) {         require(balanceOf[msg.sender] >= value, "Insufficient balance");         balanceOf[msg.sender] -= value;         balanceOf[to] += value;         emit Transfer(msg.sender, to, value);         return true;     }      function approve(address spender, uint256 value) public returns (bool success) {         allowance[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function transferFrom(address from, address to, uint256 value) public returns (bool success) {         require(value <= balanceOf[from], "Insufficient balance");         require(value <= allowance[from][msg.sender], "Not allowed");         balanceOf[from] -= value;         balanceOf[to] += value;         allowance[from][msg.sender] -= value;         emit Transfer(from, to, value);         return true;     } }