// SPDX-License-Identifier: MIT pragma solidity ^0.8.10;  contract MyToken {      string public constant name = "MyToken";     string public constant symbol = "MTK";     uint256 public constant totalSupply = 1e24;     uint8 public constant decimals = 18;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      mapping(address => uint256) public balanceOf;     mapping(address => mapping(address => uint256)) public allowance;      constructor() {         balanceOf[msg.sender] = totalSupply;     }      function transfer(address to, uint256 value) public returns(bool success){         require(balanceOf[msg.sender] >= value);         balanceOf[msg.sender] -= value;         balanceOf[to] += value;         emit Transfer(msg.sender, to, value);         return true;     }      function approve(address spender, uint256 value) public returns(bool success){         allowance[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function transferFrom(address from, address to, uint256 value) public returns(bool success){         require(value <= balanceOf[from]);         require(value <= allowance[from][msg.sender]);         balanceOf[from] -= value;         balanceOf[to] += value;         allowance[from][msg.sender] -= value;         emit Transfer(from, to, value);         return true;     } }