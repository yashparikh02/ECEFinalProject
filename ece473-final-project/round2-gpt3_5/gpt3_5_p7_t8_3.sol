// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  contract ERC20 {     string public name;     string public symbol;     uint8 public immutable decimals;     uint256 public immutable totalSupply;      mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {         name = _name;         symbol = _symbol;         decimals = _decimals;         totalSupply = _totalSupply * 10 ** uint256(_decimals);         balanceOf[msg.sender] = totalSupply;         emit Transfer(address(0), msg.sender, totalSupply);     }      function _transfer(address _from, address _to, uint256 _value) internal {         require(_to != address(0), "ERC20: transfer to the zero address");         require(balanceOf[_from] >= _value, "ERC20: transfer amount exceeds balance");          uint256 previousBalance = balanceOf[_from] + balanceOf[_to];         balanceOf[_from] -= _value;         balanceOf[_to] += _value;         emit Transfer(_from, _to, _value);         assert(balanceOf[_from] + balanceOf[_to] == previousBalance);     }      function transfer(address _to, uint256 _value) public returns (bool) {         _transfer(msg.sender, _to, _value);         return true;     }      function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {         require(_value <= allowance[_from][msg.sender], "ERC20: transfer amount exceeds allowance");         allowance[_from][msg.sender] -= _value;         _transfer(_from, _to, _value);         return true;     }      function approve(address _spender, uint256 _value) public returns (bool) {         allowance[msg.sender][_spender] = _value;         emit Approval(msg.sender, _spender, _value);         return true;     }      function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {         allowance[msg.sender][_spender] += _addedValue;         emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);         return true;     }      function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {         uint256 oldValue = allowance[msg.sender][_spender];         if (_subtractedValue >= oldValue) {             allowance[msg.sender][_spender] = 0;         } else {             allowance[msg.sender][_spender] -= _subtractedValue;         }         emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);         return true;     } }