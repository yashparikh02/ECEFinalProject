// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  interface IERC20 {     function totalSupply() external view returns (uint256);     function balanceOf(address account) external view returns (uint256);     function transfer(address recipient, uint256 amount) external returns (bool);     function allowance(address owner, address spender) external view returns (uint256);     function approve(address spender, uint256 amount) external returns (bool);     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value); }  contract ERC20 is IERC20 {     string public name;     string public symbol;     uint8 public immutable decimals;     uint256 public immutable override totalSupply;     mapping(address => uint256) public balances;     mapping(address => mapping(address => uint256)) public allowed;      constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {         name = _name;         symbol = _symbol;         decimals = _decimals;         totalSupply = _initialSupply * (10 ** uint256(_decimals));         balances[msg.sender] = totalSupply;         emit Transfer(address(0), msg.sender, totalSupply);     }      function balanceOf(address owner) external view override returns (uint256) {         return balances[owner];     }      function transfer(address to, uint256 value) external override returns (bool) {         require(to != address(0), "ERC20: transfer to the zero address");         require(value <= balances[msg.sender], "ERC20: transfer amount exceeds balance");          balances[msg.sender] -= value;         balances[to] += value;         emit Transfer(msg.sender, to, value);          return true;     }      function approve(address spender, uint256 value) external override returns (bool) {         allowed[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function transferFrom(address from, address to, uint256 value) external override returns (bool) {         require(to != address(0), "ERC20: transfer to the zero address");         require(value <= balances[from], "ERC20: transfer amount exceeds balance");         require(value <= allowed[from][msg.sender], "ERC20: transfer amount exceeds allowance");          balances[from] -= value;         balances[to] += value;         allowed[from][msg.sender] -= value;         emit Transfer(from, to, value);          return true;     }      function allowance(address owner, address spender) external view override returns (uint256) {         return allowed[owner][spender];     } }