// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  contract ERC20 {     string public name;     string public symbol;     uint8 public immutable decimals;     uint256 public immutable totalSupply;     mapping(address => uint256) public balanceOf;     mapping(address => mapping(address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {         name = _name;         symbol = _symbol;         decimals = _decimals;         totalSupply = _initialSupply * 10 ** uint256(_decimals);         balanceOf[msg.sender] = totalSupply;         emit Transfer(address(0), msg.sender, totalSupply);     }      function transfer(address to, uint256 value) external returns (bool) {         require(to != address(0), "ERC20: transfer to the zero address");         require(balanceOf[msg.sender] >= value, "ERC20: insufficient balance");          balanceOf[msg.sender] -= value;         balanceOf[to] += value;         emit Transfer(msg.sender, to, value);         return true;     }      function approve(address spender, uint256 value) external returns (bool) {         allowance[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function transferFrom(address from, address to, uint256 value) external returns (bool) {         require(to != address(0), "ERC20: transfer to the zero address");         require(balanceOf[from] >= value, "ERC20: insufficient balance");         require(allowance[from][msg.sender] >= value, "ERC20: insufficient allowance");          balanceOf[from] -= value;         balanceOf[to] += value;         allowance[from][msg.sender] -= value;         emit Transfer(from, to, value);         return true;     } }