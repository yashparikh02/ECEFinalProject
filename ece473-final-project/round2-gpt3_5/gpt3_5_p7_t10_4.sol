// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  interface IERC20 {     function totalSupply() external view returns (uint256);     function balanceOf(address account) external view returns (uint256);     function transfer(address recipient, uint256 amount) external returns (bool);     function allowance(address owner, address spender) external view returns (uint256);     function approve(address spender, uint256 amount) external returns (bool);     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value); }  contract ERC20Token is IERC20 {     string public name;     string public symbol;     uint8 public immutable decimals;     uint256 public immutable totalSupplyAmount;     mapping(address => uint256) private _balances;     mapping(address => mapping(address => uint256)) private _allowances;      constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {         name = _name;         symbol = _symbol;         decimals = _decimals;         totalSupplyAmount = _initialSupply * (10 ** uint256(_decimals));         _balances[msg.sender] = totalSupplyAmount;         emit Transfer(address(0), msg.sender, totalSupplyAmount);     }      function totalSupply() public view override returns (uint256) {         return totalSupplyAmount;     }      function balanceOf(address account) public view override returns (uint256) {         return _balances[account];     }      function transfer(address recipient, uint256 amount) public override returns (bool) {         _transfer(msg.sender, recipient, amount);         return true;     }      function allowance(address owner, address spender) public view override returns (uint256) {         return _allowances[owner][spender];     }      function approve(address spender, uint256 amount) public override returns (bool) {         _approve(msg.sender, spender, amount);         return true;     }      function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {         _transfer(sender, recipient, amount);         _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);         return true;     }      function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {         _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);         return true;     }      function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {         _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);         return true;     }      function _transfer(address sender, address recipient, uint256 amount) internal {         require(sender != address(0), "ERC20: transfer from the zero address");         require(recipient != address(0), "ERC20: transfer to the zero address");          _balances[sender] -= amount;         _balances[recipient] += amount;         emit Transfer(sender, recipient, amount);     }      function _approve(address owner, address spender, uint256 amount) internal {         require(owner != address(0), "ERC20: approve from the zero address");         require(spender != address(0), "ERC20: approve to the zero address");          _allowances[owner][spender] = amount;         emit Approval(owner, spender, amount);     } }