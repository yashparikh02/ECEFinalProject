// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  /**  * @title ERC20 token contract  * @dev Standard ERC20 token  */ contract ERC20Token {     string public name;     string public symbol;     uint8 public immutable decimals;     uint256 public immutable totalSupply;      mapping(address => uint256) public balances;     mapping(address => mapping(address => uint256)) public allowances;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      constructor(         string memory _name,         string memory _symbol,         uint8 _decimals,         uint256 _initialSupply     ) {         name = _name;         symbol = _symbol;         decimals = _decimals;         totalSupply = _initialSupply * (10 ** uint256(_decimals));         balances[msg.sender] = totalSupply;         emit Transfer(address(0), msg.sender, totalSupply);     }      function balanceOf(address owner) external view returns (uint256) {         return balances[owner];     }      function transfer(address to, uint256 value) external returns (bool) {         _transfer(msg.sender, to, value);         return true;     }      function transferFrom(address from, address to, uint256 value) external returns (bool) {         require(value <= allowances[from][msg.sender], "Insufficient allowance");         allowances[from][msg.sender] -= value;         _transfer(from, to, value);         return true;     }      function approve(address spender, uint256 value) external returns (bool) {         allowances[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function allowance(address owner, address spender) external view returns (uint256) {         return allowances[owner][spender];     }      function _transfer(address from, address to, uint256 value) internal {         require(to != address(0), "Invalid transfer to zero address");         require(balances[from] >= value, "Insufficient balance");         balances[from] -= value;         balances[to] += value;         emit Transfer(from, to, value);     } }