// SPDX-License-Identifier: MIT pragma solidity ^0.8.0;  contract ERC20 {     string private immutable _name;     string private immutable _symbol;     uint8 private immutable _decimals;     uint256 private immutable _totalSupply;     mapping(address => uint256) private _balances;     mapping(address => mapping(address => uint256)) private _allowances;      event Transfer(address indexed from, address indexed to, uint256 value);     event Approval(address indexed owner, address indexed spender, uint256 value);      constructor(         string memory name_,         string memory symbol_,         uint8 decimals_,         uint256 totalSupply_     ) {         _name = name_;         _symbol = symbol_;         _decimals = decimals_;         _totalSupply = totalSupply_;         _balances[msg.sender] = totalSupply_;     }      function name() public view returns (string memory) {         return _name;     }      function symbol() public view returns (string memory) {         return _symbol;     }      function decimals() public view returns (uint8) {         return _decimals;     }      function totalSupply() public view returns (uint256) {         return _totalSupply;     }      function balanceOf(address owner) public view returns (uint256 balance) {         return _balances[owner];     }      function transfer(address to, uint256 value) public returns (bool success) {         require(to != address(0), "ERC20: transfer to the zero address");         require(value <= _balances[msg.sender], "ERC20: transfer amount exceeds balance");          _balances[msg.sender] -= value;         _balances[to] += value;         emit Transfer(msg.sender, to, value);         return true;     }      function transferFrom(address from, address to, uint256 value) public returns (bool success) {         require(to != address(0), "ERC20: transfer to the zero address");         require(value <= _balances[from], "ERC20: transfer amount exceeds balance");         require(value <= _allowances[from][msg.sender], "ERC20: transfer amount exceeds allowance");          _balances[from] -= value;         _balances[to] += value;         _allowances[from][msg.sender] -= value;         emit Transfer(from, to, value);         return true;     }      function approve(address spender, uint256 value) public returns (bool success) {         _allowances[msg.sender][spender] = value;         emit Approval(msg.sender, spender, value);         return true;     }      function allowance(address owner, address spender) public view returns (uint256 remaining) {         return _allowances[owner][spender];     } }